package com.love.jax.bean.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.love.jax.bean.table.county;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "county".
*/
public class countyDao extends AbstractDao<county, Long> {

    public static final String TABLENAME = "county";

    /**
     * Properties of entity county.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CountyCode = new Property(1, String.class, "countyCode", false, "COUNTY_CODE");
        public final static Property CountyName = new Property(2, String.class, "countyName", false, "COUNTY_NAME");
        public final static Property CityCode = new Property(3, String.class, "cityCode", false, "CITY_CODE");
    }


    public countyDao(DaoConfig config) {
        super(config);
    }
    
    public countyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"county\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"COUNTY_CODE\" TEXT," + // 1: countyCode
                "\"COUNTY_NAME\" TEXT," + // 2: countyName
                "\"CITY_CODE\" TEXT);"); // 3: cityCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"county\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, county entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String countyCode = entity.getCountyCode();
        if (countyCode != null) {
            stmt.bindString(2, countyCode);
        }
 
        String countyName = entity.getCountyName();
        if (countyName != null) {
            stmt.bindString(3, countyName);
        }
 
        String cityCode = entity.getCityCode();
        if (cityCode != null) {
            stmt.bindString(4, cityCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, county entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String countyCode = entity.getCountyCode();
        if (countyCode != null) {
            stmt.bindString(2, countyCode);
        }
 
        String countyName = entity.getCountyName();
        if (countyName != null) {
            stmt.bindString(3, countyName);
        }
 
        String cityCode = entity.getCityCode();
        if (cityCode != null) {
            stmt.bindString(4, cityCode);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public county readEntity(Cursor cursor, int offset) {
        county entity = new county( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // countyCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // countyName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // cityCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, county entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCountyCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCountyName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCityCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(county entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(county entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(county entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
